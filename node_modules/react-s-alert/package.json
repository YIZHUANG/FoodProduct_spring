{
  "_args": [
    [
      {
        "raw": "react-s-alert@^1.2.0",
        "scope": null,
        "escapedName": "react-s-alert",
        "name": "react-s-alert",
        "rawSpec": "^1.2.0",
        "spec": ">=1.2.0 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\acer\\Desktop\\FoodProduct_springboot"
    ]
  ],
  "_from": "react-s-alert@>=1.2.0 <2.0.0",
  "_id": "react-s-alert@1.3.2",
  "_inCache": true,
  "_location": "/react-s-alert",
  "_nodeVersion": "8.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-s-alert-1.3.2.tgz_1509201027629_0.2301822886802256"
  },
  "_npmUser": {
    "name": "juliancwirko",
    "email": "julian.cwirko@gmail.com"
  },
  "_npmVersion": "5.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-s-alert@^1.2.0",
    "scope": null,
    "escapedName": "react-s-alert",
    "name": "react-s-alert",
    "rawSpec": "^1.2.0",
    "spec": ">=1.2.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-s-alert/-/react-s-alert-1.3.2.tgz",
  "_shasum": "56d8453428d56f22a240eb014d2020d3f62ea984",
  "_shrinkwrap": null,
  "_spec": "react-s-alert@^1.2.0",
  "_where": "C:\\Users\\acer\\Desktop\\FoodProduct_springboot",
  "author": {
    "name": "Julian Ä†wirko"
  },
  "bugs": {
    "url": "https://github.com/juliancwirko/react-s-alert/issues"
  },
  "dependencies": {
    "babel-runtime": "^6.23.0"
  },
  "description": "Alerts / Notifications for React with rich configuration options",
  "devDependencies": {
    "babel-cli": "^6.24.1",
    "babel-core": "^6.24.1",
    "babel-eslint": "^7.2.1",
    "babel-plugin-transform-es2015-modules-umd": "^6.24.1",
    "babel-plugin-transform-object-assign": "^6.22.0",
    "babel-plugin-transform-runtime": "^6.23.0",
    "babel-polyfill": "^6.23.0",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-react": "^6.24.1",
    "babel-preset-stage-2": "^6.24.1",
    "chai": "^3.5.0",
    "enzyme": "^3.0.0",
    "enzyme-adapter-react-16": "^1.0.2",
    "eslint": "^3.19.0",
    "eslint-plugin-babel": "^4.1.1",
    "eslint-plugin-react": "^6.10.3",
    "jsdom": "^9.12.0",
    "mocha": "^3.2.0",
    "nodemon": "^1.11.0",
    "prop-types": "^15.5.4",
    "react": "^15.5.0 || ^16.0.0",
    "react-dom": "^15.5.0  || ^16.0.0",
    "react-test-renderer": "^15.5.4 || ^16.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-6Gz/s5Jw3LbuFR6liD3A4f7w0cDASo1Zas+HaUtUCEm6cVQhgHsUPOBMR9bP8mfiH6KWfRGhiX3t38FbFYrVOg==",
    "shasum": "56d8453428d56f22a240eb014d2020d3f62ea984",
    "tarball": "https://registry.npmjs.org/react-s-alert/-/react-s-alert-1.3.2.tgz"
  },
  "gitHead": "48c10a9e4a0bc124a85c6b7b85a20c828943adf0",
  "homepage": "https://github.com/juliancwirko/react-s-alert",
  "keywords": [
    "react-component",
    "react",
    "alert",
    "alerts",
    "react-alert",
    "react-alerts",
    "notifications",
    "react-notifications",
    "errors",
    "react-errors",
    "toastr"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "juliancwirko",
      "email": "julian.cwirko@gmail.com"
    }
  ],
  "name": "react-s-alert",
  "optionalDependencies": {},
  "options": {
    "mocha": "--require scripts/mocha_runner lib/**/__tests__/**/*.js"
  },
  "peerDependencies": {
    "react": "^15.0.0 || ^16.0.0",
    "react-dom": "^15.0.0 || ^16.0.0",
    "prop-types": "^15.5.4"
  },
  "readme": "# React sAlert component\n\nsAlert is a React component which provides alerts or notifications with rich configuration possibilities.\nThis is a rewritten version of Meteor/Blaze sAlert package which you can find here: [s-alert.meteor.com](http://s-alert.meteor.com).\n\n## Demo\n\nThe demo website and provided source code are the best learning resources.\n\n- [live demo app](http://react-s-alert.jsdemo.be/)\n- [demo app source code](https://github.com/juliancwirko/react-s-alert-demo)\n\n## Usage with React\n\nHere is what you need to do to make it work.\n**Of course you need to have React and ReactDOM installed in your project.**\n\n### 1. Install the package\n\n```\nnpm install react-s-alert --save\n```\n\n### 2. Import component\n\nWith ES2015:\n```\nimport Alert from 'react-s-alert';\n```\n\nWith ES5:\n```\nvar Alert = require('react-s-alert').default;\n```\n\n### 3. Import (or copy) CSS files\n\nAll you need to do is to import (or copy) a default CSS file and some or all CSS files with effects which you want to use. A default CSS file is mandatory. With Webpack you could do something like:\n\nWith ES2015:\n```javascript\n// mandatory\nimport 'react-s-alert/dist/s-alert-default.css';\n\n// optional - you can choose the effect you want\nimport 'react-s-alert/dist/s-alert-css-effects/slide.css';\nimport 'react-s-alert/dist/s-alert-css-effects/scale.css';\nimport 'react-s-alert/dist/s-alert-css-effects/bouncyflip.css';\nimport 'react-s-alert/dist/s-alert-css-effects/flip.css';\nimport 'react-s-alert/dist/s-alert-css-effects/genie.css';\nimport 'react-s-alert/dist/s-alert-css-effects/jelly.css';\nimport 'react-s-alert/dist/s-alert-css-effects/stackslide.css';\n```\n\nWith ES5:\n```javascript\n// mandatory\nrequire('react-s-alert/dist/s-alert-default.css');\n\n// optional - you can choose the effect you want\nrequire('react-s-alert/dist/s-alert-css-effects/slide.css');\nrequire('react-s-alert/dist/s-alert-css-effects/scale.css');\nrequire('react-s-alert/dist/s-alert-css-effects/bouncyflip.css');\nrequire('react-s-alert/dist/s-alert-css-effects/flip.css');\nrequire('react-s-alert/dist/s-alert-css-effects/genie.css');\nrequire('react-s-alert/dist/s-alert-css-effects/jelly.css');\nrequire('react-s-alert/dist/s-alert-css-effects/stackslide.css');\n```\n\nYou can also copy the files and include it another way in your app. It depends on your workflow.\n\n**If you are using CSS Modules for now you need to import these files globally.** (You can check the demo website Webpack config file).\n\n### 4. Place sAlert component in you main app component\n\nYou need to place the main sAlert container. The best place for it is at the end of your main app component. For Example:\n\n```javascript\nimport React from 'react';\nimport {Router} from 'react-router';\nimport Alert from 'react-s-alert';\n\nimport 'react-s-alert/dist/s-alert-default.css';\nimport 'react-s-alert/dist/s-alert-css-effects/slide.css';\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <span>\n                    {this.props.children}\n                </span>\n                <Alert stack={{limit: 3}} />\n            </div>\n        )\n    }\n}\n\nexport default Main;\n```\n\n### 5. Make calls to activate alerts\n\nYou can activate your alerts in many different places in the app. You need to call proper methods. For Example:\n\nMethods which you can use:\n\n- **Alert.warning(message, configObj)**\n- **Alert.error(message, configObj)**\n- **Alert.info(message, configObj)**\n- **Alert.success(message, configObj)**\n- **Alert.close(alertId)**\n- **Alert.closeAll()**\n\nsAlert methods will return the already created alertId.\n\nExample usage:\n```javascript\nimport React from 'react';\nimport Alert from 'react-s-alert';\n\nclass Home extends React.Component {\n    handleClick1(e) {\n        e.preventDefault();\n        Alert.warning('<h1>Test message 1</h1>', {\n            position: 'top-right',\n            effect: 'scale',\n            onShow: function () {\n                console.log('aye!')\n            },\n            beep: false,\n            timeout: 'none',\n            offset: 100\n        });\n    }\n    handleClick2(e) {\n        e.preventDefault();\n        Alert.info('Test message 2', {\n            position: 'bottom-left',\n            effect: 'bouncyflip',\n            timeout: 'none'\n        });\n    }\n    handleClick3(e) {\n        e.preventDefault();\n        Alert.error('Test message 3', {\n            position: 'bottom-right',\n            effect: 'slide',\n            timeout: 'none'\n        });\n    }\n    handleCloseAll(e) {\n        e.preventDefault();\n        Alert.closeAll();\n    }\n    render() {\n        return (\n            <div>\n                <div>\n                    <a href=\"#\" onClick={this.handleClick1}>Click 1</a> |\n                    <a href=\"#\" onClick={this.handleClick2}>Click 2</a> |\n                    <a href=\"#\" onClick={this.handleClick3}>Click 3</a> |\n                    <a href=\"#\" onClick={this.handleCloseAll}>Close All</a>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Home;\n```\n\nYou always need to provide a `message`. For example\n\n```javascript\nAlert.error('Test message 3');\n```\n\nYou can also provide a react component:\n\n```javascript\nAlert.error(<MyComponent props1={props1} props2={props2}/>);\n```\n\nYou don't need to provide the configuration object here, just remember to provide it globally.\n\n## Configuration details\n\nWith sAlert you can place your configuration as a global config in the main sAlert container, for example:\n\n```javascript\n<Alert stack={{limit: 3}} html={true} />\n```\n\nYou can also overwrite these global settings in the particular method call. For example, here we will overwrite the global settings for 'html' in our error alert call:\n\n```javascript\nAlert.error('Error message...', {\n    position: 'bottom-right',\n    effect: 'slide',\n    html: false\n});\n```\n\n### All possible configuration options:\n\n#### First - only global configuration options\nYou can set it up only in the main sAlert component props\n\n##### 1. `stack`\nYou can stack your alerts or just display them in the same place.\n\nPossible stack values:\n\n- **true** or **false**\n- object with:\n    - **limit** (you can limit your alerts displayed on screen)\n    - **spacing** (you can change the space around your alerts)\n\nExamples:\n```javascript\n<Alert stack={{limit: 3, spacing: 50}} />\n```\nor\n```javascript\n<Alert stack={true} />\n```\n\n##### 2. `contentTemplate`\nYou can prepare your own content template even with additional fields (More details can be found later on in this README.)\n\nExamples:\n\n```javascript\n<Alert contentTemplate={MyContentTemplate} />\n```\n\nHere you can also use all configuration options listed below.\n\n#### Configuration options with a single sAlert method call\n\n##### 1. `effect`\nYou can provide the name of the animations effect, you also need to import proper CSS file.\n\nExample:\n\nIn method call:\n```javascript\nAlert.success('Message...', {\n    effect: 'genie'\n});\n```\n\nIn global config:\n```javascript\n<Alert effect='genie' />\n```\n\nPossible effects names:\n\n- **slide**\n- **scale**\n- **bouncyflip**\n- **flip**\n- **genie**\n- **jelly**\n- **stackslide**\n\nRemember that you need to import the CSS files for the effects. See above.\n\n##### 2. `position`\nWhere the alert should appear.\n\nExample:\n\nIn method call:\n```javascript\nAlert.success('Message...', {\n    position: 'top-right'\n});\n```\n\nIn global config:\n```javascript\n<Alert position='top-right' />\n```\n\nPossible positions:\n\n- **top** (full width)\n- **bottom** (full width)\n- **top-right**\n- **top-left**\n- **bottom-right**\n- **bottom-left**\n\n\n##### 3. `timeout`\n\nYou can set up the timeout in ms.\n\nExample:\n\nIn method call:\n```javascript\nAlert.success('Message...', {\n    timeout: 5000\n});\n```\n\nIn global config:\n```javascript\n<Alert timeout={5000} />\n```\n\nPossible timeout values:\n\n- **(Number - ms)**\n- **'none'**\n\n##### 4. `html`\n\nYou can configure if your alert should display HTML formated messages.\n\nExample:\n\nIn method call:\n```javascript\nAlert.success('<h1>Message...</h1>', {\n    html: true\n});\n```\n\nIn global config:\n```javascript\n<Alert html={true} />\n```\n\nPossible 'html' values:\n\n- **true**\n- **false**\n\n##### 5. `offset`\n\nIn px. Will be added to first alert (bottom or top - depends on the position in config).\n\nExample:\n\nIn method call:\n```javascript\nAlert.success('Message...', {\n    offset: 150\n});\n```\n\nIn global config:\n```javascript\n<Alert offset={150} />\n```\n\nPossible offset values:\n\n- **(Number - px)**\n\n##### 6. `beep`\n\nYou can set up your audio 'beeps'. Just configure your audio file path. (.mp3 files should work in every browser.) You can also configure 4 paths for 4 conditions.\n\n**There is no default audio sample in the package.**\nYou should use sound samples which you know that you have the right to use it.\n\nExample:\n\nIn method call:\n```javascript\nAlert.success('Message...', {\n    beep: '/path-to-audio/file.mp3'\n});\n```\n\nIn global config:\n```javascript\n<Alert beep={{\n    info: '/path-to-audio/file-info.mp3',\n    error: '/path-to-audio/file-error.mp3',\n    warning: '/path-to-audio/file-warning.mp3',\n    success: '/path-to-audio/file-success.mp3'}} />\n```\nor just one for all:\n\n```javascript\n<Alert beep='/path-to-audio/file.mp3' />\n```\n\nPossible 'beep' values:\n\n- **(String - audio file path)** (one audio file for all alerts)\n- **(Object)**\n    - {info: '/path/file.mp3', error: '/path/file.mp3', warning: '/path/file.mp3', success: '/path/file.mp3'}\n\n##### 7. `onShow`\n\nExecute a callback function. onShow will fire the function when the alert appears.\n\nExample:\n\nIn method call:\n```javascript\nAlert.success('Message...', {\n    onShow: function () {\n        console.log('onShow Fired!');\n    }\n});\n```\n\nIn global config:\n```javascript\n<Alert onShow={this.handleOnShow} />\n```\n\nPossible 'onShow' values:\n\n- **(Function)**\n\n##### 8. `onClose`\n\nExecute a callback function.  Will fire the function when the alert is closed.\n\nExample:\n\nIn method call:\n```javascript\nAlert.success('Message...', {\n    onClose: function () {\n        console.log('onClose Fired!');\n    }\n});\n```\n\nIn global config:\n```javascript\n<Alert onClose={this.handleOnClose} />\n```\n\nPossible 'onClose' values:\n\n- **(Function)**\n\n##### 9. `customFields`\n\nYou can pass a customFields object for your custom content template component. You need to prepare the component to be able to display customFields values. You'll read more about it below.\n\nExample:\n\nIn global config you need to provide custom content template component:\n```javascript\n<Alert contentTemplate={MyContentTemplate} />\n```\n\nIn method call you can provide custom fields used in your custom template:\n```javascript\nAlert.success('Message...', {\n    customFields: {\n        specialInfo: this.getSpecialInfo();\n    }\n});\n```\n\nPossible 'customFields' values:\n\n- **(Object)**\n\n## Overwrite content template component\n\nWith sAlert you have the possibility to overwrite the `SAlertContentTmpl` core component. This is useful when you want to provide more dynamic data in your alerts or just when you want to rebuild the HTML structure of the alert. This is very useful, but might not be trivial. Standard sAlerts will take only the message you want to display and some configuration. There will be use cases when you want to display some more dynamic data or just some more HTML structures.\n\n I'll try to explain it by example:\n\nLet's say that we want to have an alert with the additional dynamic data. We want the name of the customer, and a confirmation button which will close the alert.\n\nHere is what we could do.\n\nIn our main app component we will use sAlert component (see above) with a custom content component:\n\n```javascript\nimport MyCustomContentTemplate from './MyCustomContentTemplate';\n(...)\n<Alert contentTemplate={MyCustomContentTemplate} />\n(...)\n```\n\nWe have just told our sAlert component that we will use a custom content component instead the core one which is called `SAlertContentTmpl`. (You should copy the content of the `SAlertContentTmpl` in your custom one and add your own modifications to it).\n\nFor example our `MyCustomContentTemplate` component could look like:\n\n```javascript\nimport React from 'react';\nimport Alert from 'react-s-alert';\n\nclass MyCustomContentTemplate extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    handleConfirm() {\n        console.log('Customer confirmation!');\n        Alert.close(this.props.id);\n    }\n    render() {\n        return (\n            <div className={this.props.classNames} id={this.props.id} style={this.props.styles}>\n                <div className='s-alert-box-inner'>\n                    {this.props.message}\n                </div>\n                <h3>{this.props.customFields.customerName}</h3>\n                <button onClick={this.handleConfirm.bind(this)}>Confirm</button>\n                <span className='s-alert-close' onClick={this.props.handleClose}></span>\n            </div>\n        )\n    }\n}\n\nexport default MyCustomContentTemplate;\n```\n\nThen you just need to pass the `customerName` value somewhere in your app. For example:\n\n```\nAlert.warning('Customer confirmation needed.', {\n    customFields: {\n        customerName: 'Stefan Kowalski'\n    }\n});\n```\n\nAs you can see you should keep the other props here. These are the props which are needed to provide proper behaviour of your alerts. You need to be careful with custom content components.\n\n## Testing and Development\n\nClone and install it first:\n\n```\ngit clone https://github.com/juliancwirko/react-s-alert.git\ncd react-s-alert\nnpm install\n```\n\nIf you want to test (Node.js 4.0 or newer):\n\n```\nnpm test\n```\nor\n```\nnpm run testonly\n```\n\nIf you want to transpile from ES2015 to ES5:\n\n```\nnpm run prepublish\n```\n\n## Also check out\n\n- [Meteor/React/GraphQL apps development](http://www.psd2meteor.com/)\n- [Open Source Live Chat App built with Meteor](https://www.simplechat.support/)\n- [Stylus Flexbox Grid](http://stylusgrid.com/)\n- [React project boilerplate with Webpack, HMR, React Router](https://github.com/juliancwirko/react-boilerplate)\n- [Boilerplate for creating React Npm packages with ES2015](https://github.com/juliancwirko/react-npm-boilerplate)\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/juliancwirko/react-s-alert.git"
  },
  "scripts": {
    "lint": "eslint ./lib",
    "lintfix": "eslint ./lib --fix",
    "prepublishOnly": "babel --plugins transform-es2015-modules-umd lib --ignore __tests__ --out-dir ./dist",
    "test": "npm run lint && npm run testonly",
    "testonly": "mocha $npm_package_options_mocha"
  },
  "version": "1.3.2"
}
